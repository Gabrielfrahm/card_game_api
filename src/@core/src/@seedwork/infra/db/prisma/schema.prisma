generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  email_confirmation Boolean
  name               String
  password           String
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())

  auths Auth?
  Deck  Deck[]

  hostedMatches       Match[] @relation("Host")
  participatedMatches Match[] @relation("Participant")

  @@map("users")
}

model Auth {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String   @unique
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("auths")
}

model Card {
  id          String     @id @default(uuid())
  name        String     @unique
  number      Int        @unique
  category    String
  image_url   String
  description String
  atk         String
  def         String
  effect      String
  main_card   Boolean
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  Deck        Deck[]
  DeckCard    DeckCard[]

  @@map("cards")
}

model Deck {
  id           String     @id @default(uuid())
  name         String
  user_id      String
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  main_card_id String?    @default("")
  card         Card?      @relation(fields: [main_card_id], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
  DeckCard     DeckCard[]

  @@map("decks")
}

model DeckCard {
  id         String   @id @default(uuid())
  deck       Deck     @relation(fields: [deck_id], references: [id], onDelete: Cascade)
  deck_id    String
  card       Card     @relation(fields: [card_id], references: [id])
  card_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("deck_cards")
}

model Match {
  id             String   @id @default(uuid())
  host_id        String   @unique
  user           User     @relation("Host", fields: [host_id], references: [id])
  participant_id String?  @unique
  participant    User?    @relation("Participant", fields: [participant_id], references: [id])
  status         String
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
}
